{"ast":null,"code":"// eslint-disable-next-line import/named\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from '../api/counterAPI';\nconst initialState = {\n  value: 0,\n  status: 'idle'\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk('example/fetchCount', async amount => {\n  const response = await fetchCount(amount);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      // eslint-disable-next-line no-param-reassign\n      state.value += 1;\n    },\n    decrement: state => {\n      // eslint-disable-next-line no-param-reassign\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      // eslint-disable-next-line no-param-reassign\n      state.value += action.payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      // eslint-disable-next-line no-param-reassign\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      // eslint-disable-next-line no-param-reassign\n      state.status = 'idle';\n      // eslint-disable-next-line no-param-reassign\n      state.value += action.payload;\n    }).addCase(incrementAsync.rejected, state => {\n      // eslint-disable-next-line no-param-reassign\n      state.status = 'failed';\n    });\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.example.value)`\nexport const selectCount = state => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default counterSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchCount","initialState","value","status","incrementAsync","amount","response","data","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","selectCount","counter","incrementIfOdd","dispatch","getState","currentValue","reducer"],"sources":["/Users/yujinpil/Documents/just/src/data/redux/counterSlice.ts"],"sourcesContent":["// eslint-disable-next-line import/named\nimport {\n  createAsyncThunk,\n  createSlice,\n  PayloadAction,\n} from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from './store';\nimport { fetchCount } from '../api/counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'example/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  },\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state: any) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      // eslint-disable-next-line no-param-reassign\n      state.value += 1;\n    },\n    decrement: (state) => {\n      // eslint-disable-next-line no-param-reassign\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      // eslint-disable-next-line no-param-reassign\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(\n        incrementAsync.pending,\n        (state) => {\n          // eslint-disable-next-line no-param-reassign\n          state.status = 'loading';\n        },\n      )\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        // eslint-disable-next-line no-param-reassign\n        state.status = 'idle';\n        // eslint-disable-next-line no-param-reassign\n        state.value += action.payload;\n      })\n      .addCase(incrementAsync.rejected, (state) => {\n        // eslint-disable-next-line no-param-reassign\n        state.status = 'failed';\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.example.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n"],"mappings":"AAAA;AACA,SACEA,gBAAgB,EAChBC,WAAW,QAEN,kBAAkB;AAEzB,SAASC,UAAU,QAAQ,mBAAmB;AAO9C,MAAMC,YAA0B,GAAG;EACjCC,KAAK,EAAE,CAAC;EACRC,MAAM,EAAE;AACV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGN,gBAAgB,CAC5C,oBAAoB,EACpB,MAAOO,MAAc,IAAK;EACxB,MAAMC,QAAQ,GAAG,MAAMN,UAAU,CAACK,MAAM,CAAC;EACzC;EACA,OAAOC,QAAQ,CAACC,IAAI;AACtB,CAAC,CACF;AAED,OAAO,MAAMC,YAAY,GAAGT,WAAW,CAAC;EACtCU,IAAI,EAAE,SAAS;EACfR,YAAY;EACZ;EACAS,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAU,IAAK;MACzB;MACA;MACA;MACA;MACA;MACAA,KAAK,CAACV,KAAK,IAAI,CAAC;IAClB,CAAC;IACDW,SAAS,EAAGD,KAAK,IAAK;MACpB;MACAA,KAAK,CAACV,KAAK,IAAI,CAAC;IAClB,CAAC;IACD;IACAY,iBAAiB,EAAE,CAACF,KAAK,EAAEG,MAA6B,KAAK;MAC3D;MACAH,KAAK,CAACV,KAAK,IAAIa,MAAM,CAACC,OAAO;IAC/B;EACF,CAAC;EACD;EACA;EACAC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CACNf,cAAc,CAACgB,OAAO,EACrBR,KAAK,IAAK;MACT;MACAA,KAAK,CAACT,MAAM,GAAG,SAAS;IAC1B,CAAC,CACF,CACAgB,OAAO,CAACf,cAAc,CAACiB,SAAS,EAAE,CAACT,KAAK,EAAEG,MAAM,KAAK;MACpD;MACAH,KAAK,CAACT,MAAM,GAAG,MAAM;MACrB;MACAS,KAAK,CAACV,KAAK,IAAIa,MAAM,CAACC,OAAO;IAC/B,CAAC,CAAC,CACDG,OAAO,CAACf,cAAc,CAACkB,QAAQ,EAAGV,KAAK,IAAK;MAC3C;MACAA,KAAK,CAACT,MAAM,GAAG,QAAQ;IACzB,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEQ,SAAS;EAAEE,SAAS;EAAEC;AAAkB,CAAC,GAAGN,YAAY,CAACe,OAAO;;AAE/E;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAIZ,KAAgB,IAAKA,KAAK,CAACa,OAAO,CAACvB,KAAK;;AAEpE;AACA;AACA,OAAO,MAAMwB,cAAc,GAAIrB,MAAc,IAAe,CAACsB,QAAQ,EAAEC,QAAQ,KAAK;EAClF,MAAMC,YAAY,GAAGL,WAAW,CAACI,QAAQ,EAAE,CAAC;EAC5C,IAAIC,YAAY,GAAG,CAAC,KAAK,CAAC,EAAE;IAC1BF,QAAQ,CAACb,iBAAiB,CAACT,MAAM,CAAC,CAAC;EACrC;AACF,CAAC;AAED,eAAeG,YAAY,CAACsB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}